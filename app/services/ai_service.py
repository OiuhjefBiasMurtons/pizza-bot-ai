"""
Servicio de IA para manejar conversaciones inteligentes del bot de pizza
"""

import openai
import json
import logging
from typing import Dict, List, Optional, Tuple, cast
from sqlalchemy.orm import Session
from sqlalchemy import func
from app.models.cliente import Cliente
from app.models.pizza import Pizza
from app.models.pedido import Pedido, DetallePedido
from app.services.bot_service import BotService
from config.settings import settings

logger = logging.getLogger(__name__)

# AIService para manejar la l√≥gica de IA
# Este servicio se encarga de procesar mensajes, extraer intenciones y manejar el contexto
# Utiliza OpenAI para generar respuestas inteligentes basadas en el contexto del cliente y la conversaci√≥n
class AIService:
    def __init__(self, db: Session):
        self.db = db
        self.bot_service = BotService(db)
        self.openai_client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
        
        # Configurar el contexto del sistema
        self.system_prompt = self._create_system_prompt()
        
    def _create_system_prompt(self) -> str:
        """Crear el prompt del sistema para la IA con contexto completo de la base de datos"""
        
        # Obtener informaci√≥n de pizzas
        pizzas_info = self._get_pizzas_context()
        
        # Obtener estad√≠sticas de la base de datos
        db_stats = self._get_database_stats()
        
        # Obtener pizzas m√°s populares
        popular_pizzas = self._get_popular_pizzas()
        
        return f"""
Eres un asistente de ventas especializado en una pizzer√≠a que opera por WhatsApp.

INFORMACI√ìN DEL NEGOCIO:
- Nombre: Pizza Bias
- Servicio: Entrega de pizzas a domicilio
- M√©todo de pedido: WhatsApp
- √Årea de entrega: Sur de Cali

MEN√ö ACTUAL:
{pizzas_info}

ESTAD√çSTICAS DE LA BASE DE DATOS:
{db_stats}

PIZZAS M√ÅS POPULARES:
{popular_pizzas}

PERSONALIDAD:
- Amigable y profesional
- Usa emojis apropiados üçï
- Responde en espa√±ol
- Mant√©n las respuestas concisas pero informativas

CAPACIDADES:
1. Responder preguntas sobre pizzas (ingredientes, precios, tama√±os)
2. Ayudar con el proceso de pedido
3. Sugerir pizzas seg√∫n preferencias
4. Manejar modificaciones de pedidos (agregar, quitar, reemplazar)
5. Limpiar y modificar el carrito de compras
6. Resolver dudas sobre entrega
7. Hacer recomendaciones basadas en popularidad
8. Detectar intenciones de cambio como "solo quiero", "cambia mi pedido", "quita las otras"

RESTRICCIONES:
- Solo vendes pizzas del men√∫ actual
- No puedes crear pizzas personalizadas
- No manejas pagos (solo tomas pedidos)
- No das informaci√≥n m√©dica sobre alergias

FORMATO DE RESPUESTA:
- Siempre responde en formato JSON con esta estructura:
{{
    "tipo_respuesta": "informacion|pedido|menu|ayuda|recomendacion|modificacion",
    "requiere_accion": true/false,
    "accion_sugerida": "mostrar_menu|agregar_pizza|confirmar_pedido|solicitar_direccion|recomendar_pizza|limpiar_carrito|modificar_carrito|reemplazar_pedido|null",
    "mensaje": "Tu respuesta al usuario",
    "datos_extraidos": {{
        "pizzas_solicitadas": [
            {{"numero": 1, "tama√±o": "mediana", "cantidad": 1}}
        ],
        "direccion": "direcci√≥n si se menciona",
        "modificaciones": "cambios solicitados",
        "accion_carrito": "limpiar|modificar|reemplazar"
    }}
}}

EJEMPLO DE CONVERSACI√ìN:
Usuario: "Quiero una pizza margarita grande"
Respuesta: {{
    "tipo_respuesta": "pedido",
    "requiere_accion": true,
    "accion_sugerida": "agregar_pizza",
    "mensaje": "¬°Perfecto! Te agrego una pizza Margarita grande por $15.99. ¬øQuieres agregar algo m√°s a tu pedido? üçï",
    "datos_extraidos": {{
        "pizzas_solicitadas": [{{"numero": 1, "tama√±o": "grande", "cantidad": 1}}]
    }}
}}

EJEMPLO DE MODIFICACI√ìN:
Usuario: "Solo quiero la pepperoni grande"
Respuesta: {{
    "tipo_respuesta": "modificacion",
    "requiere_accion": true,
    "accion_sugerida": "reemplazar_pedido",
    "mensaje": "Entendido, reemplazar√© tu pedido actual por una pizza Pepperoni grande por $22.99. ¬øEst√° bien as√≠? üçï",
    "datos_extraidos": {{
        "pizzas_solicitadas": [{{"numero": 2, "tama√±o": "grande", "cantidad": 1}}],
        "accion_carrito": "reemplazar"
    }}
}}

PALABRAS CLAVE PARA MODIFICACI√ìN:
- "Solo quiero" ‚Üí reemplazar_pedido
- "Cambia mi pedido" ‚Üí reemplazar_pedido  
- "Mejor haz" ‚Üí reemplazar_pedido
- "Quita las otras" ‚Üí reemplazar_pedido
- "En su lugar" ‚Üí reemplazar_pedido
- "Cancela todo y" ‚Üí reemplazar_pedido
- "√önicamente" ‚Üí reemplazar_pedido
- "Solamente" ‚Üí reemplazar_pedido

IMPORTANTE: Cuando el usuario dice "Solo quiero X" significa que quiere REEMPLAZAR todo el carrito actual con √∫nicamente X.
"""
    
    def _get_pizzas_context(self) -> str:
        """Obtener contexto completo de pizzas desde la base de datos"""
        try:
            pizzas = self.db.query(Pizza).filter(Pizza.disponible == True).all()
            
            if not pizzas:
                return "No hay pizzas disponibles en este momento."
            
            pizzas_info = []
            for i, pizza in enumerate(pizzas, 1):
                emoji = pizza.emoji or "üçï"
                info = (
                    f"{i}. {emoji} {pizza.nombre}: {pizza.descripcion}\n"
                    f"   - Peque√±a: ${pizza.precio_pequena:.2f}\n"
                    f"   - Mediana: ${pizza.precio_mediana:.2f}\n"
                    f"   - Grande: ${pizza.precio_grande:.2f}"
                )
                pizzas_info.append(info)
            
            return "\n".join(pizzas_info)
            
        except Exception as e:
            logger.error(f"Error obteniendo contexto de pizzas: {str(e)}")
            return "Error al cargar informaci√≥n de pizzas."
    
    def _get_database_stats(self) -> str:
        """Obtener estad√≠sticas de la base de datos"""
        try:
            # Contar clientes registrados
            total_clientes = self.db.query(Cliente).count()
            
            # Contar pedidos realizados
            total_pedidos = self.db.query(Pedido).count()
            
            # Contar pizzas disponibles
            total_pizzas = self.db.query(Pizza).filter(Pizza.disponible == True).count()
            
            # Calcular valor promedio de pedido
            avg_pedido = self.db.query(func.avg(Pedido.total)).scalar() or 0
            
            stats = f"""- Total de clientes registrados: {total_clientes}
- Total de pedidos realizados: {total_pedidos}
- Pizzas disponibles en men√∫: {total_pizzas}
- Valor promedio de pedido: ${avg_pedido:.2f}"""
            
            return stats
            
        except Exception as e:
            logger.error(f"Error obteniendo estad√≠sticas: {str(e)}")
            return "- Estad√≠sticas no disponibles"
    
    def _get_popular_pizzas(self) -> str:
        """Obtener pizzas m√°s populares basadas en pedidos"""
        try:
            # Consulta para obtener pizzas m√°s vendidas
            popular_query = (
                self.db.query(
                    Pizza.nombre,
                    Pizza.emoji,
                    func.sum(DetallePedido.cantidad).label('total_vendidas'),
                    func.count(DetallePedido.id).label('veces_pedida')
                )
                .join(DetallePedido, Pizza.id == DetallePedido.pizza_id)
                .join(Pedido, DetallePedido.pedido_id == Pedido.id)
                .filter(Pizza.disponible == True)
                .group_by(Pizza.id, Pizza.nombre, Pizza.emoji)
                .order_by(func.sum(DetallePedido.cantidad).desc())
                .limit(3)
                .all()
            )
            
            if not popular_query:
                return "No hay datos de ventas disponibles a√∫n."
            
            popular_info = []
            for i, (nombre, emoji, total_vendidas, veces_pedida) in enumerate(popular_query, 1):
                emoji_display = emoji or "üçï"
                info = f"{i}. {emoji_display} {nombre} - {total_vendidas} pizzas vendidas en {veces_pedida} pedidos"
                popular_info.append(info)
            
            return "\n".join(popular_info)
            
        except Exception as e:
            logger.error(f"Error obteniendo pizzas populares: {str(e)}")
            return "Informaci√≥n de popularidad no disponible."
    
    def _get_client_context(self, cliente: Cliente) -> str:
        """Obtener contexto espec√≠fico del cliente"""
        try:
            if not cliente:
                return "Cliente nuevo (no registrado)"
            
            # Obtener √∫ltimos pedidos del cliente
            ultimos_pedidos = (
                self.db.query(Pedido)
                .filter(Pedido.cliente_id == cliente.id)
                .order_by(Pedido.fecha_pedido.desc())
                .limit(3)
                .all()
            )
            
            context = f"""INFORMACI√ìN DEL CLIENTE:
- Nombre: {cliente.nombre or 'No registrado'}
- N√∫mero: {cliente.numero_whatsapp}
- Direcci√≥n: {cliente.direccion or 'No registrada'}
- Fecha de registro: {cliente.fecha_registro.strftime('%Y-%m-%d') if cliente.fecha_registro is not None else 'No disponible'}
- √öltimo pedido: {cliente.ultimo_pedido.strftime('%Y-%m-%d') if cliente.ultimo_pedido is not None else 'Nunca'}"""
            
            if ultimos_pedidos:
                context += "\n\n√öLTIMOS PEDIDOS:"
                for pedido in ultimos_pedidos:
                    context += f"\n- {pedido.fecha_pedido.strftime('%Y-%m-%d')}: ${pedido.total:.2f} ({pedido.estado})"
                    
                    # Obtener detalles del pedido
                    detalles = (
                        self.db.query(DetallePedido, Pizza.nombre)
                        .join(Pizza, DetallePedido.pizza_id == Pizza.id)
                        .filter(DetallePedido.pedido_id == pedido.id)
                        .all()
                    )
                    
                    for detalle, pizza_nombre in detalles:
                        context += f"\n  ‚Ä¢ {pizza_nombre} ({detalle.tamano}) x{detalle.cantidad}"
            
            return context
            
        except Exception as e:
            logger.error(f"Error obteniendo contexto del cliente: {str(e)}")
            return "Informaci√≥n del cliente no disponible."
    
    async def process_with_ai(self, 
                            numero_whatsapp: str, 
                            mensaje: str, 
                            cliente: Optional[Cliente] = None,
                            contexto_conversacion: Optional[Dict] = None) -> Dict:
        """
        Procesar mensaje con IA y determinar la acci√≥n apropiada
        """
        
        # Obtener contexto din√°mico actualizado
        contexto_dinamico = self.get_dynamic_context(numero_whatsapp)
        
        # Usar el cliente del contexto din√°mico si no se proporcion√≥
        if not cliente and contexto_dinamico.get('cliente'):
            cliente = contexto_dinamico['cliente']
        
        # Construir contexto de la conversaci√≥n
        context = self._build_conversation_context(numero_whatsapp, cliente, contexto_conversacion)
        
        # Agregar contexto din√°mico
        if contexto_dinamico:
            context += f"\n\nCONTEXTO DIN√ÅMICO:\n"
            context += f"- Pedidos recientes (30 d√≠as): {contexto_dinamico.get('pedidos_recientes_30_dias', 0)}\n"
            context += f"- Pizzas disponibles: {contexto_dinamico.get('pizzas_disponibles', 0)}\n"
            if contexto_dinamico.get('recomendaciones'):
                context += f"\nRECOMENDACIONES:\n{contexto_dinamico['recomendaciones']}\n"
        
        # Preparar mensajes para OpenAI con tipos correctos
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"Contexto: {context}\n\nMensaje del usuario: {mensaje}"}
        ]
        
        try:
            # Llamar a OpenAI
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=messages,  # type: ignore
                temperature=0.7,
                max_tokens=500
            )
            
            # Verificar que el contenido no sea None
            content = response.choices[0].message.content
            if content is None:
                logger.error("OpenAI response content is None")
                return self._fallback_response(mensaje)
            
            # Limpiar markdown code blocks si existen
            content = content.strip()
            if content.startswith("```json"):
                content = content.replace("```json", "").replace("```", "").strip()
            elif content.startswith("```"):
                content = content.replace("```", "").strip()
            
            # Parsear respuesta
            ai_response = json.loads(content)
            
            # Log para debugging
            logger.info(f"AI Response: {ai_response}")
            
            return ai_response
            
        except json.JSONDecodeError:
            logger.error(f"Error parseando respuesta de IA: {response.choices[0].message.content}")
            return self._fallback_response(mensaje)
            
        except Exception as e:
            logger.error(f"Error en llamada a OpenAI: {str(e)}")
            return self._fallback_response(mensaje)
    
    def _build_conversation_context(self, 
                                  numero_whatsapp: str, 
                                  cliente: Optional[Cliente],
                                  contexto_conversacion: Optional[Dict]) -> str:
        """Construir contexto completo de la conversaci√≥n"""
        
        context = f"CONVERSACI√ìN CON: {numero_whatsapp}\n\n"
        
        # Agregar contexto del cliente si existe
        if cliente:
            context += self._get_client_context(cliente) + "\n\n"
        else:
            context += "CLIENTE NUEVO (no registrado)\n\n"
        
        # Agregar contexto de la conversaci√≥n actual
        if contexto_conversacion:
            context += f"ESTADO ACTUAL DE LA CONVERSACI√ìN:\n"
            context += f"- Estado: {contexto_conversacion.get('estado', 'inicio')}\n"
            
            carrito = contexto_conversacion.get('carrito', [])
            if carrito:
                context += "- Carrito actual:\n"
                total_carrito = 0
                for item in carrito:
                    context += f"  ‚Ä¢ {item['pizza_nombre']} ({item['tamano']}): ${item['precio']:.2f}\n"
                    total_carrito += item['precio']
                context += f"- Total del carrito: ${total_carrito:.2f}\n"
            else:
                context += "- Carrito: vac√≠o\n"
            
            # Agregar informaci√≥n de entrega si existe
            if contexto_conversacion.get('direccion_entrega'):
                context += f"- Direcci√≥n de entrega: {contexto_conversacion['direccion_entrega']}\n"
        
        return context
    
    def get_personalized_recommendations(self, cliente: Optional[Cliente]) -> str:
        """Obtener recomendaciones personalizadas para el cliente"""
        try:
            if not cliente:
                # Para clientes nuevos, recomendar pizzas populares
                popular_pizzas = self._get_popular_pizzas()
                return f"Como cliente nuevo, te recomendamos nuestras pizzas m√°s populares:\n{popular_pizzas}"
            
            # Obtener pizzas que el cliente ha pedido antes
            pizzas_cliente = (
                self.db.query(Pizza.nombre, Pizza.emoji, func.count(DetallePedido.id).label('veces_pedida'))
                .join(DetallePedido, Pizza.id == DetallePedido.pizza_id)
                .join(Pedido, DetallePedido.pedido_id == Pedido.id)
                .filter(Pedido.cliente_id == cliente.id)
                .group_by(Pizza.id, Pizza.nombre, Pizza.emoji)
                .order_by(func.count(DetallePedido.id).desc())
                .limit(3)
                .all()
            )
            
            if not pizzas_cliente:
                return "No tienes historial de pedidos. Te recomendamos nuestras pizzas m√°s populares."
            
            recomendaciones = "Basado en tus pedidos anteriores:\n"
            for nombre, emoji, veces in pizzas_cliente:
                emoji_display = emoji or "üçï"
                recomendaciones += f"- {emoji_display} {nombre} (pedida {veces} {'vez' if veces == 1 else 'veces'})\n"
            
            return recomendaciones
            
        except Exception as e:
            logger.error(f"Error obteniendo recomendaciones: {str(e)}")
            return "No se pudieron cargar las recomendaciones."
    
    def get_dynamic_context(self, numero_whatsapp: str) -> Dict:
        """Obtener contexto din√°mico actualizado de la base de datos"""
        try:
            # Obtener cliente
            cliente = self.db.query(Cliente).filter(Cliente.numero_whatsapp == numero_whatsapp).first()
            
            # Obtener pedidos recientes (√∫ltimos 30 d√≠as)
            from datetime import datetime, timedelta
            fecha_limite = datetime.now() - timedelta(days=30)
            
            pedidos_recientes = (
                self.db.query(Pedido)
                .filter(Pedido.fecha_pedido >= fecha_limite)
                .count()
            )
            
            # Obtener pizzas con stock bajo (simulado - podr√≠as agregar un campo stock a Pizza)
            pizzas_disponibles = self.db.query(Pizza).filter(Pizza.disponible == True).count()
            
            return {
                "cliente": cliente,
                "pedidos_recientes_30_dias": pedidos_recientes,
                "pizzas_disponibles": pizzas_disponibles,
                "recomendaciones": self.get_personalized_recommendations(cliente)
            }
            
        except Exception as e:
            logger.error(f"Error obteniendo contexto din√°mico: {str(e)}")
            return {}
    
    def refresh_system_context(self):
        """Refrescar el contexto del sistema cuando hay cambios en la base de datos"""
        try:
            self.system_prompt = self._create_system_prompt()
            logger.info("Sistema de IA actualizado con nuevo contexto de base de datos")
        except Exception as e:
            logger.error(f"Error refrescando contexto del sistema: {str(e)}")
    
    def get_pizza_by_name_or_number(self, identifier: str) -> Optional[Pizza]:
        """Obtener pizza por nombre o n√∫mero de men√∫"""
        try:
            # Intentar como n√∫mero primero
            if identifier.isdigit():
                pizzas = self.db.query(Pizza).filter(Pizza.disponible == True).all()
                pizza_num = int(identifier)
                if 1 <= pizza_num <= len(pizzas):
                    return pizzas[pizza_num - 1]
            
            # Buscar por nombre (case insensitive)
            pizza = (
                self.db.query(Pizza)
                .filter(Pizza.disponible == True)
                .filter(Pizza.nombre.ilike(f"%{identifier}%"))
                .first()
            )
            
            return pizza
            
        except Exception as e:
            logger.error(f"Error buscando pizza: {str(e)}")
            return None
    
    def validate_pizza_order(self, pizza_data: Dict) -> Dict:
        """Validar datos de pedido de pizza"""
        try:
            errors = []
            
            # Validar pizza
            if "numero" in pizza_data:
                pizza = self.get_pizza_by_name_or_number(str(pizza_data["numero"]))
                if not pizza:
                    errors.append(f"Pizza n√∫mero {pizza_data['numero']} no encontrada")
            
            # Validar tama√±o
            tamanos_validos = ["peque√±a", "mediana", "grande"]
            if pizza_data.get("tama√±o") not in tamanos_validos:
                errors.append(f"Tama√±o inv√°lido. Opciones: {', '.join(tamanos_validos)}")
            
            # Validar cantidad
            cantidad = pizza_data.get("cantidad", 1)
            if not isinstance(cantidad, int) or cantidad < 1 or cantidad > 10:
                errors.append("Cantidad debe ser entre 1 y 10")
            
            return {
                "valido": len(errors) == 0,
                "errores": errors,
                "pizza": pizza if len(errors) == 0 else None
            }
            
        except Exception as e:
            logger.error(f"Error validando pedido: {str(e)}")
            return {
                "valido": False,
                "errores": ["Error interno de validaci√≥n"],
                "pizza": None
            }
    
    def _fallback_response(self, mensaje: str) -> Dict:
        """Respuesta de respaldo cuando la IA falla"""
        return {
            "tipo_respuesta": "error",
            "requiere_accion": False,
            "accion_sugerida": None,
            "mensaje": "Disculpa, hay un problema t√©cnico. ¬øPuedes repetir tu mensaje? ü§ñ",
            "datos_extraidos": {}
        }
    
    async def should_use_ai(self, mensaje: str, estado_actual: str) -> bool:
        """
        Determinar si usar IA o el flujo tradicional
        """
        
        # Validar que el mensaje no sea None o vac√≠o
        if not mensaje or not isinstance(mensaje, str):
            return False
        
        # Comandos simples que no requieren IA
        comandos_simples = [
            'hola', 'menu', 'ayuda', 'si', 'no', 'confirmar', 'cancelar'
        ]
        
        mensaje_lower = mensaje.lower().strip()
        
        # Si es un comando simple y estamos en estado apropiado, no usar IA
        if mensaje_lower in comandos_simples and estado_actual in ['inicio', 'menu']:
            return False
        
        # Si es un n√∫mero simple (selecci√≥n de pizza), no usar IA
        if mensaje_lower.isdigit() and estado_actual == 'menu':
            return False
        
        # Para todo lo dem√°s, usar IA
        return True
    
    async def extract_intent(self, mensaje: str) -> Dict:
        """Extraer intenci√≥n del mensaje usando IA"""
        
        intent_prompt = f"""
        Analiza el siguiente mensaje y determina la intenci√≥n del usuario:
        
        Mensaje: "{mensaje}"
        
        Responde solo con un JSON:
        {{
            "intencion": "saludo|menu|pedido|pregunta|modificacion|confirmacion|cancelacion|ayuda",
            "confianza": 0.8,
            "entidades": {{
                "pizza_mencionada": "nombre de pizza si se menciona",
                "tama√±o": "peque√±a|mediana|grande",
                "cantidad": 1,
                "accion": "agregar|quitar|modificar"
            }}
        }}
        """
        
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo-0125",
                messages=[{"role": "user", "content": intent_prompt}],  # type: ignore
                temperature=0.3,
                max_tokens=200
            )
            
            # Verificar que el contenido no sea None
            content = response.choices[0].message.content
            if content is None:
                logger.error("OpenAI response content is None in extract_intent")
                return {"intencion": "ayuda", "confianza": 0.1, "entidades": {}}
            
            # Limpiar markdown code blocks si existen
            content = content.strip()
            if content.startswith("```json"):
                content = content.replace("```json", "").replace("```", "").strip()
            elif content.startswith("```"):
                content = content.replace("```", "").strip()
            
            return json.loads(content)
            
        except Exception as e:
            logger.error(f"Error extrayendo intenci√≥n: {str(e)}")
            return {"intencion": "ayuda", "confianza": 0.1, "entidades": {}}
