"""
Modelos de prueba para el men칰 de pizzer칤a basado en las im치genes del men칰.
Este archivo modela los items del men칰 para una nueva base de datos.
"""

from dataclasses import dataclass
from typing import List, Optional
from enum import Enum


class TamanoPizza(Enum):
    """Enum para los tama침os de pizza disponibles"""
    JUNIOR = "junior"
    PERSONAL = "personal"
    PEQUENA = "pequena"
    MEDIANA = "mediana"
    GRANDE = "grande"
    FAMILIAR = "familiar"


class TamanoLasagna(Enum):
    """Enum para los tama침os de lasagna disponibles"""
    PEQUENA = "pequena"
    GRANDE = "grande"
    EXTRA = "extra"


class CategoriaItem(Enum):
    """Categor칤as de items del men칰"""
    PIZZA = "pizza"
    LASAGNA = "lasagna"
    ENTRADA = "entrada"

@dataclass
class TamanoInfo:
    """Informaci칩n sobre un tama침o espec칤fico"""
    nombre: str
    porciones: str
    precio: int


@dataclass
class VariedadPizza:
    """Informaci칩n sobre una variedad de pizza"""
    nombre: str
    ingredientes: List[str]
    descripcion: Optional[str] = None


@dataclass
class VariedadLasagna:
    """Informaci칩n sobre una variedad de lasagna"""
    nombre: str
    ingredientes: List[str]
    descripcion: Optional[str] = None


@dataclass
class Entrada:
    """Informaci칩n sobre una entrada"""
    nombre: str
    descripcion: str
    precio: int


class MenuModels:
    """Clase que contiene todos los modelos del men칰"""
    
    # Tama침os de pizza con precios
    TAMANOS_PIZZA = {
        TamanoPizza.JUNIOR: TamanoInfo("Junior", "4 porciones (21 CM)", 12000),
        TamanoPizza.PERSONAL: TamanoInfo("Personal", "4 porciones", 22000),
        TamanoPizza.PEQUENA: TamanoInfo("Peque침a", "6 porciones (30 CM)", 29000),
        TamanoPizza.MEDIANA: TamanoInfo("Mediana", "8 porciones (35 CM)", 37000),
        TamanoPizza.GRANDE: TamanoInfo("Grande", "10 porciones (40 CM)", 44000),
        TamanoPizza.FAMILIAR: TamanoInfo("Familiar", "12 porciones (45 CM)", 55000),
    }
    
    # Tama침os de lasagna con precios
    TAMANOS_LASAGNA = {
        TamanoLasagna.PEQUENA: TamanoInfo("Peque침a", "", 14000),
        TamanoLasagna.GRANDE: TamanoInfo("Grande", "", 20000),
        TamanoLasagna.EXTRA: TamanoInfo("Extra", "", 27000),
    }
    
    # Variedades de pizza
    VARIEDADES_PIZZA = [
        VariedadPizza("De la Casa", ["jam칩n", "salami", "cabano", "cebolla", "champi침ones", "piment칩n"]),
        VariedadPizza("Carne", ["jam칩n", "salami", "cabano", "carne bolognesa"]),
        VariedadPizza("Mediterr치nea", ["jam칩n", "champi침칩n", "cebolla", "carne bolognesa"]),
        VariedadPizza("Ib칠rica", ["jam칩n", "salami", "cabano", "pollo"]),
        VariedadPizza("Peperoni", ["peperoni"]),
        VariedadPizza("Bolognesa", ["jam칩n", "ma칤z", "tomate", "piment칩n", "cebolla", "carne bolognesa"]),
        VariedadPizza("Mexicana", ["jam칩n", "jalape침o", "carne bolognesa", "ma칤z", "piment칩n", "cebolla", "tomate"]),
        VariedadPizza("Zamba", ["maduritos", "tocineta", "ma칤z"]),
        VariedadPizza("Maduritos", ["maduritos", "cabano", "ma칤z"]),
        VariedadPizza("Hawaiana", ["jam칩n", "pi침a"]),
        VariedadPizza("Pi침a", ["pi침a", "carne bolognesa"]),
        VariedadPizza("Tropical", ["pollo", "pi침a", "tocineta"]),
        VariedadPizza("Parmesana", ["maduro", "tocineta", "queso parmesano"]),
        VariedadPizza("Del Campo", ["jam칩n", "ma칤z", "tocineta", "tomate"]),
        VariedadPizza("Topo", ["pollo", "tomate", "tocineta"]),
        VariedadPizza("Toposa", ["tocineta", "pollo", "salami"]),
        VariedadPizza("Margarita", ["tomate", "albahaca", "aceite de oliva"]),
        VariedadPizza("Vegetariana", ["cebolla", "ajo", "champi침ones", "tomate", "piment칩n"]),
        VariedadPizza("Margarita Especial", ["tomate", "albahaca", "tocineta", "aceite de oliva"]),
        VariedadPizza("Italiana", ["jam칩n", "champi침ones", "tomate", "ma칤z"]),
        VariedadPizza("Primavera", ["pollo", "tomate", "ma칤z"]),
        VariedadPizza("Americana", ["jam칩n", "salchicha ranchera", "ma칤z"]),
        VariedadPizza("Julieta", ["jam칩n", "salami", "ma칤z"]),
        VariedadPizza("Pollo con Champi침ones", ["pollo", "champi침ones"]),
        VariedadPizza("Pollo con Bolognesa y Pi침a", ["pollo", "carne bolognesa", "pi침a"]),
        VariedadPizza("Pollo con Tocineta y Ma칤z", ["pollo", "tocineta", "ma칤z"]),
        VariedadPizza("Pollo y Jam칩n", ["pollo", "jam칩n"]),
        VariedadPizza("Espa침ola", ["salami", "cabano", "aceitunas"]),
        VariedadPizza("Picante", ["jam칩n", "pollo", "carne bolognesa", "pimienta negra"]),
    ]
    
    # Variedades de lasagna
    VARIEDADES_LASAGNA = [
        VariedadLasagna("De Bolognesa", ["carne bolognesa"], "Acompa침ada con pan de ajo"),
        VariedadLasagna("De Bolognesa + Jam칩n", ["carne bolognesa", "jam칩n"], "Acompa침ada con pan de ajo"),
        VariedadLasagna("De Bolognesa + Ma칤z", ["carne bolognesa", "ma칤z"], "Acompa침ada con pan de ajo"),
        VariedadLasagna("De Pollo", ["pollo"], "Acompa침ada con pan de ajo"),
        VariedadLasagna("De Pollo + Ma칤z", ["pollo", "ma칤z"], "Acompa침ada con pan de ajo"),
        VariedadLasagna("Pocha", ["pollo", "champi침칩n"], "Acompa침ada con pan de ajo"),
        VariedadLasagna("Mixta", ["pollo", "carne bolognesa"], "Acompa침ada con pan de ajo"),
        VariedadLasagna("Tropical", ["pollo", "carne bolognesa", "pi침a"], "Acompa침ada con pan de ajo"),
        VariedadLasagna("Vegetariana", ["champi침ones", "cebolla", "ajo", "tomate"], "Acompa침ada con pan de ajo"),
    ]
    
    # Entradas
    ENTRADAS = [
        Entrada("Pancito con Queso Crema o Parmesano", "Pancito con queso crema o parmesano", 10000),
        Entrada("Pancito con Tomate y Queso Crema", "Pancito con tomate y queso crema", 10000),
        Entrada("Pancitos con Tocineta y Queso Crema", "Pancitos con tocineta y queso crema", 10000),
    ]


@dataclass
class ItemMenu:
    """Modelo gen칠rico para un item del men칰"""
    id: Optional[int]
    categoria: CategoriaItem
    nombre: str
    variedad: str
    tamano: Optional[str]
    precio: int
    ingredientes: List[str]
    descripcion: Optional[str] = None
    disponible: bool = True


class MenuBuilder:
    """Constructor para crear items del men칰"""
    
    @staticmethod
    def crear_pizza(variedad_nombre: str, tamano: TamanoPizza) -> ItemMenu:
        """Crea un item de pizza"""
        variedad = next((v for v in MenuModels.VARIEDADES_PIZZA if v.nombre == variedad_nombre), None)
        if not variedad:
            raise ValueError(f"Variedad de pizza '{variedad_nombre}' no encontrada")
        
        tamano_info = MenuModels.TAMANOS_PIZZA[tamano]
        
        return ItemMenu(
            id=None,
            categoria=CategoriaItem.PIZZA,
            nombre="Pizza",
            variedad=variedad.nombre,
            tamano=tamano_info.nombre,
            precio=tamano_info.precio,
            ingredientes=variedad.ingredientes,
            descripcion=f"Pizza {variedad.nombre} {tamano_info.nombre} ({tamano_info.porciones})"
        )
    
    @staticmethod
    def crear_lasagna(variedad_nombre: str, tamano: TamanoLasagna) -> ItemMenu:
        """Crea un item de lasagna"""
        variedad = next((v for v in MenuModels.VARIEDADES_LASAGNA if v.nombre == variedad_nombre), None)
        if not variedad:
            raise ValueError(f"Variedad de lasagna '{variedad_nombre}' no encontrada")
        
        tamano_info = MenuModels.TAMANOS_LASAGNA[tamano]
        
        return ItemMenu(
            id=None,
            categoria=CategoriaItem.LASAGNA,
            nombre="Lasagna",
            variedad=variedad.nombre,
            tamano=tamano_info.nombre,
            precio=tamano_info.precio,
            ingredientes=variedad.ingredientes,
            descripcion=f"Lasagna {variedad.nombre} {tamano_info.nombre}. {variedad.descripcion}"
        )
    
    @staticmethod
    def crear_entrada(entrada_nombre: str) -> ItemMenu:
        """Crea un item de entrada"""
        entrada = next((e for e in MenuModels.ENTRADAS if e.nombre == entrada_nombre), None)
        if not entrada:
            raise ValueError(f"Entrada '{entrada_nombre}' no encontrada")
        
        return ItemMenu(
            id=None,
            categoria=CategoriaItem.ENTRADA,
            nombre="Entrada",
            variedad=entrada.nombre,
            tamano=None,
            precio=entrada.precio,
            ingredientes=[],
            descripcion=entrada.descripcion
        )


def test_models():
    """Funci칩n de prueba para validar los modelos"""
    print("=== PRUEBA DE MODELOS DEL MEN칔 ===\n")
    
    # Crear algunas pizzas de ejemplo
    print("游꼣 PIZZAS:")
    pizza1 = MenuBuilder.crear_pizza("De la Casa", TamanoPizza.MEDIANA)
    pizza2 = MenuBuilder.crear_pizza("Hawaiana", TamanoPizza.GRANDE)
    
    print(f"- {pizza1.descripcion}")
    print(f"  Ingredientes: {', '.join(pizza1.ingredientes)}")
    print(f"  Precio: ${pizza1.precio:,}")
    print()
    
    print(f"- {pizza2.descripcion}")
    print(f"  Ingredientes: {', '.join(pizza2.ingredientes)}")
    print(f"  Precio: ${pizza2.precio:,}")
    print()
    
    # Crear algunas lasagnas de ejemplo
    print("游꼫 LASAGNAS:")
    lasagna1 = MenuBuilder.crear_lasagna("De Bolognesa", TamanoLasagna.GRANDE)
    lasagna2 = MenuBuilder.crear_lasagna("Tropical", TamanoLasagna.PEQUENA)
    
    print(f"- {lasagna1.descripcion}")
    print(f"  Ingredientes: {', '.join(lasagna1.ingredientes)}")
    print(f"  Precio: ${lasagna1.precio:,}")
    print()
    
    print(f"- {lasagna2.descripcion}")
    print(f"  Ingredientes: {', '.join(lasagna2.ingredientes)}")
    print(f"  Precio: ${lasagna2.precio:,}")
    print()
    
    # Crear algunas entradas de ejemplo
    print("游볬 ENTRADAS:")
    entrada1 = MenuBuilder.crear_entrada("Pancito con Queso Crema o Parmesano")
    
    print(f"- {entrada1.descripcion}")
    print(f"  Precio: ${entrada1.precio:,}")
    print()
    
    print("=== RESUMEN DEL MEN칔 ===")
    print(f"游늵 Total variedades de pizza: {len(MenuModels.VARIEDADES_PIZZA)}")
    print(f"游늵 Total tama침os de pizza: {len(MenuModels.TAMANOS_PIZZA)}")
    print(f"游늵 Total variedades de lasagna: {len(MenuModels.VARIEDADES_LASAGNA)}")
    print(f"游늵 Total tama침os de lasagna: {len(MenuModels.TAMANOS_LASAGNA)}")
    print(f"游늵 Total entradas: {len(MenuModels.ENTRADAS)}")


if __name__ == "__main__":
    test_models()
