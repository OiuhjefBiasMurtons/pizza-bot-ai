#!/usr/bin/env python3
"""
Script para verificar la configuraci√≥n de Twilio (cuenta Trial)
"""
import os
from dotenv import load_dotenv
from twilio.rest import Client
from twilio.base.exceptions import TwilioRestException

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de Twilio
ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')

def check_twilio_config():
    """Verificar configuraci√≥n b√°sica de Twilio"""
    print("üîç Verificando configuraci√≥n de Twilio...")
    print(f"Account SID: {ACCOUNT_SID}")
    print(f"Phone Number: {PHONE_NUMBER}")
    print(f"Auth Token: {'*' * len(AUTH_TOKEN) if AUTH_TOKEN else 'NO CONFIGURADO'}")
    print()

def test_twilio_connection():
    """Probar conexi√≥n con Twilio"""
    print("üîó Probando conexi√≥n con Twilio...")
    
    try:
        client = Client(ACCOUNT_SID, AUTH_TOKEN)
        
        # Obtener informaci√≥n de la cuenta
        account = client.api.account.fetch()
        print(f"‚úÖ Conexi√≥n exitosa!")
        print(f"   Tipo de cuenta: {account.type}")
        print(f"   Estado: {account.status}")
        print(f"   Nombre: {account.friendly_name}")
        print()
        
        return client
        
    except TwilioRestException as e:
        print(f"‚ùå Error de Twilio: {e}")
        print(f"   C√≥digo de error: {e.code}")
        print(f"   Mensaje: {e.msg}")
        return None
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return None

def check_phone_numbers(client):
    """Verificar n√∫meros de tel√©fono disponibles"""
    print("üì± Verificando n√∫meros de tel√©fono...")
    
    try:
        # Obtener n√∫meros de tel√©fono de la cuenta
        phone_numbers = client.incoming_phone_numbers.list()
        
        if phone_numbers:
            print(f"‚úÖ N√∫meros disponibles ({len(phone_numbers)}):")
            for number in phone_numbers:
                print(f"   üìû {number.phone_number}")
                print(f"      Capabilities: SMS={number.capabilities.get('sms', False)}, "
                      f"Voice={number.capabilities.get('voice', False)}")
                if number.sms_url:
                    print(f"      Webhook SMS: {number.sms_url}")
        else:
            print("‚ö†Ô∏è  No se encontraron n√∫meros de tel√©fono")
            
    except Exception as e:
        print(f"‚ùå Error obteniendo n√∫meros: {e}")
    
    print()

def check_whatsapp_senders(client):
    """Verificar n√∫meros de WhatsApp disponibles"""
    print("üí¨ Verificando n√∫meros de WhatsApp...")
    
    try:
        # Para cuentas Trial, generalmente usan el Sandbox
        print("‚ÑπÔ∏è  Para cuentas Trial, WhatsApp funciona a trav√©s del Sandbox")
        print("   N√∫mero del Sandbox: +1 415 523 8886")
        print("   Para probarlo, env√≠a el c√≥digo de uni√≥n desde tu WhatsApp")
        print()
        
        # Intentar obtener senders de WhatsApp (puede no estar disponible en Trial)
        try:
            senders = client.messaging.services.list()
            if senders:
                print(f"‚úÖ Servicios de mensajer√≠a encontrados: {len(senders)}")
            else:
                print("‚ÑπÔ∏è  No hay servicios de mensajer√≠a configurados (normal en Trial)")
        except:
            print("‚ÑπÔ∏è  API de servicios de mensajer√≠a no disponible en Trial")
            
    except Exception as e:
        print(f"‚ùå Error verificando WhatsApp: {e}")
    
    print()

def test_sms_send(client):
    """Probar env√≠o de SMS (solo a n√∫meros verificados en Trial)"""
    print("üìß Informaci√≥n sobre env√≠o de mensajes en cuenta Trial...")
    print("‚ö†Ô∏è  IMPORTANTE: En cuentas Trial solo puedes enviar mensajes a:")
    print("   1. N√∫meros verificados en tu cuenta")
    print("   2. Tu propio n√∫mero de tel√©fono")
    print("   3. WhatsApp Sandbox (para WhatsApp)")
    print()
    
    # No enviamos SMS real para evitar costos/errores
    print("‚ÑπÔ∏è  Para probar SMS, usa este c√≥digo:")
    print(f"""
    message = client.messages.create(
        body="¬°Hola desde Pizza Bot!",
        from_="{PHONE_NUMBER}",
        to="+1234567890"  # Debe ser un n√∫mero verificado
    )
    print(f"Mensaje enviado: {{message.sid}}")
    """)
    print()

def show_trial_limitations():
    """Mostrar limitaciones de cuenta Trial"""
    print("‚ö†Ô∏è  LIMITACIONES DE CUENTA TRIAL:")
    print("=" * 50)
    print("üì± SMS:")
    print("   ‚Ä¢ Solo a n√∫meros verificados en tu cuenta")
    print("   ‚Ä¢ Prefijo autom√°tico en mensajes: '[Sent from your Twilio trial account]'")
    print("   ‚Ä¢ L√≠mite de mensajes por d√≠a")
    print()
    print("üí¨ WhatsApp:")
    print("   ‚Ä¢ Solo funciona con WhatsApp Sandbox")
    print("   ‚Ä¢ N√∫mero del Sandbox: +1 415 523 8886")
    print("   ‚Ä¢ Debes unirte al sandbox enviando el c√≥digo")
    print("   ‚Ä¢ Solo t√∫ puedes recibir mensajes")
    print()
    print("üí∞ Cr√©ditos:")
    print("   ‚Ä¢ $15.50 USD de cr√©dito inicial")
    print("   ‚Ä¢ SMS: ~$0.0075 por mensaje")
    print("   ‚Ä¢ WhatsApp: ~$0.005 por mensaje")
    print()
    print("üîß Para producci√≥n necesitar√°s:")
    print("   ‚Ä¢ Verificar tu cuenta (tarjeta de cr√©dito)")
    print("   ‚Ä¢ Comprar un n√∫mero de tel√©fono dedicado")
    print("   ‚Ä¢ Configurar WhatsApp Business API")
    print()

def main():
    print("üçï Pizza Bot - Verificador de Twilio")
    print("=" * 50)
    
    # Verificar configuraci√≥n
    check_twilio_config()
    
    # Probar conexi√≥n
    client = test_twilio_connection()
    
    if client:
        check_phone_numbers(client)
        check_whatsapp_senders(client)
        test_sms_send(client)
    
    # Mostrar limitaciones
    show_trial_limitations()
    
    print("‚úÖ Verificaci√≥n completada")
    print()
    print("üöÄ Pr√≥ximos pasos:")
    print("   1. Si todo est√° bien, configura el webhook en Twilio")
    print("   2. Para WhatsApp: √∫nete al Sandbox")
    print("   3. Prueba enviando mensajes a n√∫meros verificados")

if __name__ == "__main__":
    main()
