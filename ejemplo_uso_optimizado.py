"""
Ejemplo de uso del servicio optimizado de conversaciones
Demuestra c√≥mo integrar el nuevo sistema de cach√©
"""
import asyncio
import logging
from sqlalchemy.orm import Session
from database.connection import SessionLocal
from app.services.optimized_conversation_service import OptimizedConversationService
from app.services.cache_service import cache_service

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def ejemplo_uso_optimizado():
    """Ejemplo de uso del servicio optimizado"""
    
    # Intentar conectar a Redis (opcional)
    try:
        await cache_service.connect()
        if cache_service.redis_available:
            print("‚úÖ Redis conectado - usando cach√© distribuido")
        else:
            print("‚ö†Ô∏è Redis no disponible - usando solo cach√© en memoria")
    except Exception as e:
        print(f"‚ö†Ô∏è Error conectando Redis: {e} - usando solo cach√© en memoria")
    
    # Crear sesi√≥n de base de datos
    db: Session = SessionLocal()
    
    try:
        # Inicializar servicio optimizado
        service = OptimizedConversationService(db)
        
        # Usuario de ejemplo
        numero_test = "+1234567890"
        
        print("\nüß™ Probando servicio optimizado de conversaciones...")
        
        # 1. Obtener estado inicial (crear√° nuevo estado si no existe)
        estado1 = await service.get_conversation_state(numero_test)
        print(f"üìç Estado inicial: {estado1}")
        
        # 2. Cambiar estado
        success = await service.set_conversation_state(numero_test, "MENU")
        print(f"‚úÖ Estado cambiado: {success}")
        
        # 3. Verificar desde cach√© (deber√≠a ser m√°s r√°pido)
        estado2 = await service.get_conversation_state(numero_test)
        print(f"üéØ Estado desde cach√©: {estado2}")
        
        # 4. Obtener estad√≠sticas
        stats = await service.get_cache_stats()
        print(f"üìä Estad√≠sticas de cach√©: {stats}")
        
        # 5. Limpiar cach√© en memoria
        service.cleanup_memory_cache()
        print("üßπ Cach√© en memoria limpiado")
        
        # 6. Invalidar estado espec√≠fico
        await service.invalidate_user_state(numero_test)
        print("‚ùå Estado invalidado en cach√©")
        
        # 7. Verificar que se obtiene desde BD
        estado3 = await service.get_conversation_state(numero_test)
        print(f"üóÉÔ∏è Estado desde BD despu√©s de invalidar: {estado3}")
        
        print("\nüéâ ¬°Optimizaciones funcionando correctamente!")
        
    finally:
        db.close()
        try:
            await cache_service.disconnect()
        except Exception as e:
            print(f"‚ö†Ô∏è Error desconectando Redis: {e}")

if __name__ == "__main__":
    asyncio.run(ejemplo_uso_optimizado())
