#!/usr/bin/env python3
"""Test espec√≠fico para el problema de 'confirmar' en el pedido"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import SessionLocal
from app.services.bot_service import BotService
from app.models.cliente import Cliente
from app.models.pedido import Pedido
from app.models.conversation_state import ConversationState

async def test_confirmar_problem():
    """Test espec√≠fico para el problema de 'confirmar'"""
    
    db = SessionLocal()
    
    import time
    test_phone = f"+555confirm{int(time.time() % 1000)}"
    
    print(f"üì± N√∫mero de prueba: {test_phone}")
    print("üîç Test espec√≠fico para problema de 'confirmar'...")
    print("=" * 60)
    
    bot_service = BotService(db)
    
    # PASO 1: Registrar usuario
    print("\n1Ô∏è‚É£ REGISTRO DE USUARIO")
    await bot_service.process_message(test_phone, "hola")
    await bot_service.process_message(test_phone, "Juan P√©rez")
    await bot_service.process_message(test_phone, "Calle Principal 123, Ciudad, CP 12345")
    print("   ‚úÖ Usuario registrado")
    
    # PASO 2: Pedir men√∫
    print("\n2Ô∏è‚É£ SOLICITAR MEN√ö")
    response = await bot_service.process_message(test_phone, "menu")
    print(f"   üìã Respuesta: {response[:50]}...")
    
    # Verificar estado
    estado = bot_service.get_conversation_state(test_phone)
    print(f"   üí¨ Estado actual: {estado}")
    
    # PASO 3: Hacer pedido
    print("\n3Ô∏è‚É£ HACER PEDIDO")
    response = await bot_service.process_message(test_phone, "1 grande")
    print(f"   üçï Respuesta: {response[:100]}...")
    
    # Verificar estado despu√©s del pedido
    estado = bot_service.get_conversation_state(test_phone)
    print(f"   üí¨ Estado despu√©s del pedido: {estado}")
    
    # Verificar carrito
    carrito = bot_service.get_temporary_value(test_phone, 'carrito')
    print(f"   üõí Carrito: {len(carrito) if carrito else 0} items")
    
    # PASO 4: CONFIRMAR (aqu√≠ est√° el problema)
    print("\n4Ô∏è‚É£ CONFIRMAR PEDIDO (PROBLEMA)")
    print("   üìù Usuario escribe: 'confirmar'")
    response = await bot_service.process_message(test_phone, "confirmar")
    print(f"   ü§ñ Respuesta: {response[:100]}...")
    
    # Verificar estado despu√©s de confirmar
    estado = bot_service.get_conversation_state(test_phone)
    print(f"   üí¨ Estado despu√©s de confirmar: {estado}")
    
    # Verificar si aparece el mensaje de error
    if "especifica el numero de pizza" in response.lower():
        print("   ‚ùå ERROR: Aparece mensaje de 'especifica el numero de pizza'")
        print("   üîç AN√ÅLISIS: El bot est√° tratando 'confirmar' como selecci√≥n de pizza")
        
        # Verificar qu√© m√©todo se est√° llamando
        print("\nüîç DEBUGGING:")
        print(f"   - Estado actual: {estado}")
        print(f"   - Mensaje enviado: 'confirmar'")
        print(f"   - Respuesta recibida: {response[:150]}...")
        
    elif "direcci√≥n" in response.lower():
        print("   ‚úÖ CORRECTO: El bot pide direcci√≥n")
        
        # Continuar con el flujo correcto
        print("\n5Ô∏è‚É£ CONTINUAR FLUJO CORRECTO")
        response = await bot_service.process_message(test_phone, "s√≠")
        print(f"   üìã Resumen: {response[:100]}...")
        
        response = await bot_service.process_message(test_phone, "s√≠")
        print(f"   üéâ Confirmaci√≥n: {response[:100]}...")
        
        # Verificar pedido en BD
        cliente = db.query(Cliente).filter(Cliente.numero_whatsapp == test_phone).first()
        if cliente:
            pedidos = db.query(Pedido).filter(Pedido.cliente_id == cliente.id).all()
            print(f"   üì¶ Pedidos en BD: {len(pedidos)}")
    
    else:
        print("   ‚ö†Ô∏è  RESPUESTA INESPERADA")
        print(f"   Respuesta completa: {response}")
    
    print("\n" + "=" * 60)
    print("üéØ RESULTADO DEL TEST")
    
    # Verificar resultado final
    if "especifica el numero de pizza" in response.lower():
        print("‚ùå PROBLEMA CONFIRMADO: 'confirmar' no funciona correctamente")
        print("   - El bot interpreta 'confirmar' como selecci√≥n de pizza")
        print("   - No avanza al siguiente estado (DIRECCION)")
        print("   - El pedido no se crea en la base de datos")
    else:
        print("‚úÖ PROBLEMA RESUELTO: 'confirmar' funciona correctamente")
    
    db.close()

if __name__ == "__main__":
    asyncio.run(test_confirmar_problem())
